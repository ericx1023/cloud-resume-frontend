name: Frontend CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: aws
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: './package.json'
      
      # 設置個人信息作為環境變數
      - name: Setup Personal Info
        run: |
          # 設置 CI=true 來確保腳本知道它在 CI 環境中運行
          export CI=true
          # 輸出環境變數狀態（僅顯示是否設置，不顯示實際值）
          echo "PERSONAL_NAME: ${PERSONAL_NAME:+SET}"
          echo "PERSONAL_TITLE: ${PERSONAL_TITLE:+SET}"
          echo "PERSONAL_LOCATION: ${PERSONAL_LOCATION:+SET}"
          echo "PERSONAL_EMAIL: ${PERSONAL_EMAIL:+SET}"
          echo "PERSONAL_PHONE: ${PERSONAL_PHONE:+SET}"
          echo "PERSONAL_GITHUB: ${PERSONAL_GITHUB:+SET}"
          echo "PERSONAL_LINKEDIN: ${PERSONAL_LINKEDIN:+SET}"
          # 運行設置配置腳本
          npm run setup-config
        env:
          PERSONAL_NAME: ${{ secrets.PERSONAL_NAME }}
          PERSONAL_TITLE: ${{ secrets.PERSONAL_TITLE }}
          PERSONAL_LOCATION: ${{ secrets.PERSONAL_LOCATION }}
          PERSONAL_EMAIL: ${{ secrets.PERSONAL_EMAIL }}
          PERSONAL_PHONE: ${{ secrets.PERSONAL_PHONE }}
          PERSONAL_GITHUB: ${{ secrets.PERSONAL_GITHUB }}
          PERSONAL_LINKEDIN: ${{ secrets.PERSONAL_LINKEDIN }}
      
      - name: Debug AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID != '' && '***' || 'NOT SET' }}"
          echo "AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY != '' && '***' || 'NOT SET' }}"
          echo "AWS_REGION: ${{ secrets.AWS_REGION != '' && '***' || 'NOT SET' }}"
          echo "API_URL: ${{ secrets.API_URL != '' && '***' || 'NOT SET' }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Get API Gateway URL from backend stack
        run: |
          API_URL=$(aws cloudformation describe-stacks --stack-name cloud-resume --query "Stacks[0].Outputs[?OutputKey=='ApiEndpoint'].OutputValue" --output text)
          echo "API Gateway URL: $API_URL"
          echo "API_URL=$API_URL" >> $GITHUB_ENV
      
      - name: Install Dependencies
        run: npm install
      
      - name: Update API URL in App.tsx
        run: |
          # 替換 App.tsx 文件中的 API URL
          sed -i "s|https://ckqxck3ts0.execute-api.us-east-1.amazonaws.com/Prod/count|$API_URL|g" src/App.tsx
      
      - name: Build React App
        run: npm run build
        env:
          CI: false  # 避免 ESLint 警告被視為錯誤
          PERSONAL_NAME: ${{ secrets.PERSONAL_NAME }}
          PERSONAL_TITLE: ${{ secrets.PERSONAL_TITLE }}
          PERSONAL_LOCATION: ${{ secrets.PERSONAL_LOCATION }}
          PERSONAL_EMAIL: ${{ secrets.PERSONAL_EMAIL }}
          PERSONAL_PHONE: ${{ secrets.PERSONAL_PHONE }}
          PERSONAL_GITHUB: ${{ secrets.PERSONAL_GITHUB }}
          PERSONAL_LINKEDIN: ${{ secrets.PERSONAL_LINKEDIN }}
      
      - name: Deploy to S3
        run: |
          # 如果 S3 存儲桶不存在，則創建它
          aws s3api head-bucket --bucket ${{ secrets.S3_BUCKET_NAME }} 2>/dev/null || aws s3 mb s3://${{ secrets.S3_BUCKET_NAME }} --region ${{ secrets.AWS_REGION }}
          
          # 移除 S3 存儲桶的靜態網站託管設定 - 不需要，因為我們使用 CloudFront OAC
          
          # 上傳文件到 S3 存儲桶
          aws s3 sync build s3://${{ secrets.S3_BUCKET_NAME }} --delete
      
      - name: Set S3 bucket policy for public access
        run: |
          cat > bucket-policy.json << EOF
          {
            "Version": "2008-10-17",
            "Id": "PolicyForCloudFrontPrivateContent",
            "Statement": [
                {
                    "Sid": "AllowCloudFrontServicePrincipal",
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "cloudfront.amazonaws.com"
                    },
                    "Action": "s3:GetObject",
                    "Resource": "arn:aws:s3:::shenghao-wang-cloud-resume-2024/*",
                    "Condition": {
                        "StringEquals": {
                          "AWS:SourceArn": "arn:aws:cloudfront::216830090435:distribution/E3DX3PA0DO9E6D"
                        }
                    }
                }
            ]
          }
          EOF
          aws s3api put-bucket-policy --bucket ${{ secrets.S3_BUCKET_NAME }} --policy file://bucket-policy.json
      
      # 確保 bucket 不用作為網站託管（由 CloudFront 處理）
      - name: Configure S3 bucket for CloudFront access
        run: |
          # 關閉公開存取
          aws s3api put-public-access-block --bucket ${{ secrets.S3_BUCKET_NAME }} --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=false,RestrictPublicBuckets=true"
      
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*" 